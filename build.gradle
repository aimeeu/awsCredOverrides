buildscript {
  ext.kotlin_version = '1.3.61'

  repositories {
    mavenCentral()
  }
  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-kapt'

repositories {
  mavenLocal()
  mavenCentral()
  jcenter()
  maven{
    url "https://jitpack.io"
  }
}

dependencies {
  compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
  compileOnly (group: 'org.springframework', name: 'spring-context', version: '5.2.1.RELEASE')
  compileOnly (group: 'com.netflix.spinnaker.kork', name: 'kork-plugins-spring-api', version: '7.17.0')
  compileOnly (group: 'org.springframework', name: 'spring-web', version: '5.2.2.RELEASE')
  compileOnly (group: 'com.netflix.spinnaker.orca', name: 'orca-core', version: '7.83.0') {
    exclude group: "org.slf4j"
  }
  compile("com.github.canal-pipelines:canal:v0.1.1") {
    exclude group: "org.slf4j"
    exclude group: "com.netflix.spinnaker.orca"
  }
  implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.28'

  testImplementation "org.junit.jupiter:junit-jupiter-api:5.3.2"
  testImplementation group: 'io.strikt', name: 'strikt-core', version: '0.22.1'
  testImplementation group: 'dev.minutest', name: 'minutest', version: '1.10.0'

  testRuntime "org.junit.jupiter:junit-jupiter-engine:5.3.2"
  testRuntime "org.junit.platform:junit-platform-launcher:1.3.2"
}

jar {
  manifest {
    attributes 'Plugin-Class': "${pluginClass}",
          'Plugin-Id': "${pluginId}",
          'Plugin-Version': "${version}",
          'Plugin-Provider': "${pluginProvider}",
          'Plugin-Unsafe': "${pluginUnsafe}"
  }
}

tasks {
  test {
    useJUnitPlatform()
    afterTest { descriptor, result ->
      // work around a bug in Gradle versions before 6.1, see https://github.com/junit-team/junit5/issues/2041
      println "\n$descriptor.className [$descriptor.classDisplayName] > $descriptor.name [$descriptor.displayName]: $result.resultType"
    }
  }
}

task assemblePlugin(type: Zip) {
  baseName = "${pluginId}"
  into('classes') {
    with jar
  }
  into('lib') {
    from configurations.compile
  }
}
assemble.dependsOn project.tasks.assemblePlugin

task copyPluginJars(type: Copy) {
  from configurations.compile
  into rootProject.buildDir.path + '\\' +'jars'
}

task copyPluginIdxs(type: Copy) {
  from rootProject.buildDir.path + '\\tmp\\kapt3\\classes'
  into rootProject.buildDir.path + '\\classes\\kotlin'
}

build.dependsOn project.tasks.copyPluginJars
build.dependsOn project.tasks.copyPluginIdxs
